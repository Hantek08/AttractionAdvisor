// <auto-generated />
using AttractionAdvisor.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttractionAdvisor.DataAccess.migrations
{
    [DbContext(typeof(AttractionAdvisorDbContext))]
    [Migration("20230206102541_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttractionAdvisor.Models.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attractions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Stockholm",
                            Description = "The world's oldest open-air museum",
                            ImageSource = "https://skansen.se/wp-content/uploads/2022/10/Hazeliusporten_skansen-600x450.jpg",
                            Name = "Skansen",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Götebog",
                            Description = "Amusement park in the centre of Gothenburg",
                            ImageSource = "https://www.liseberg.se/optimized/facebook/046e6139/globalassets/parken/parkvyer/hela-parken-vy.jpg",
                            Name = "Liseberg",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Malmö",
                            Description = "One of the leading art museums in scandinavia",
                            ImageSource = "https://upload.wikimedia.org/wikipedia/commons/e/ea/Malmo_art_museum-malmo_castle.jpg",
                            Name = "Malmö Art Museum",
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            City = "Paris",
                            Description = "Wrought-iron tower on the Champ de Mars in Paris",
                            ImageSource = "https://cdn.britannica.com/54/75854-050-E27E66C0/Eiffel-Tower-Paris.jpg",
                            Name = "Eiffel tower",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AttractionAdvisor.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AttractionAdvisor.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AttractionAdvisor.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "saha68",
                            Username = "Sahar"
                        },
                        new
                        {
                            Id = 2,
                            Password = "han53",
                            Username = "Hanna"
                        },
                        new
                        {
                            Id = 3,
                            Password = "jos22",
                            Username = "Josefin"
                        },
                        new
                        {
                            Id = 4,
                            Password = "ch111",
                            Username = "Carl-Henrik"
                        },
                        new
                        {
                            Id = 5,
                            Password = "kam33",
                            Username = "Kamran"
                        },
                        new
                        {
                            Id = 6,
                            Password = "js44",
                            Username = "Jessica"
                        },
                        new
                        {
                            Id = 7,
                            Password = "ty6y7",
                            Username = "Alfons"
                        });
                });

            modelBuilder.Entity("AttractionAdvisor.Models.Attraction", b =>
                {
                    b.HasOne("AttractionAdvisor.Models.User", "User")
                        .WithMany("Attractions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttractionAdvisor.Models.Comment", b =>
                {
                    b.HasOne("AttractionAdvisor.Models.Attraction", "Attraction")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AttractionAdvisor.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttractionAdvisor.Models.Rating", b =>
                {
                    b.HasOne("AttractionAdvisor.Models.Attraction", "Attraction")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AttractionAdvisor.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttractionAdvisor.Models.Attraction", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AttractionAdvisor.Models.User", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
